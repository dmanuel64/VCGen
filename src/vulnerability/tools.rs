use super::analyzer::{extract_from_command, StaticAnalyzer};
use regex::Regex;
use std::{
    env::var,
    path::{Path, PathBuf},
    process::Command,
};

pub const FLAWFINDER_ENV_VAR: &str = "FLAWFINDER_PATH";
const DEFAULT_FLAWFINDER_PATH: &str = "/usr/bin/flawfinder";

fn env_or_default(env_var: &str, default_path: &Path) -> PathBuf {
    var(env_var)
        .and_then(|val| Ok(PathBuf::from(val)))
        .unwrap_or(PathBuf::from(default_path))
}

/// A C static analyzer tool capable of collecting vulnerability information and
/// CWEs.
pub struct Flawfinder {
    path: PathBuf,
}

impl Flawfinder {
    /// Creates an instance of Flawfinder using its default install location or the [`FLAWFINDER_ENV_VAR`]
    /// environment variable.
    pub fn new() -> Self {
        Self {
            path: PathBuf::from(Self::install_location().expect("Flawfinder is not installed.")),
        }
    }

    /// Find the install location (if any) of Flawfinder
    pub fn install_location() -> Option<PathBuf> {
        let path = env_or_default(FLAWFINDER_ENV_VAR, &Path::new(DEFAULT_FLAWFINDER_PATH));
        if path.is_file() {
            Some(path)
        } else {
            None
        }
    }
}

impl StaticAnalyzer for Flawfinder {
    fn vulnerabilities(&self, source_file: &Path) -> Vec<String> {
        extract_from_command(
            &Regex::new(r"FINAL\sRESULTS:\s{2}([\s\S]+)\sANALYSIS\sSUMMARY:").unwrap(),
            &mut Command::new(&self.path).arg(source_file),
            true,
        )
        .unwrap_or(vec![])
    }

    fn name(&self) -> &str {
        "Flawfinder"
    }
}

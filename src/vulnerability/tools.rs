use super::analyzer::{extract_from_command, StaticAnalyzer};
use regex::Regex;
use std::{
    path::{Path, PathBuf},
    process::Command,
};

pub struct Flawfinder {
    path: PathBuf,
}

impl Flawfinder {
    pub fn new(tool_path: &Path) -> Self {
        Flawfinder {
            path: PathBuf::from(tool_path),
        }
    }
}

impl Default for Flawfinder {
    fn default() -> Self {
        Self::new(Path::new("flawfinder"))
    }
}

impl StaticAnalyzer for Flawfinder {
    fn vulnerabilities(&self, source_file: &Path) -> Vec<String> {
        extract_from_command(
            &Regex::new("").unwrap(),
            &mut Command::new(&self.path),
            true,
        )
        .unwrap_or_else(|err| {
            eprintln!(
                "Could not run Flawfinder from {} due to {}",
                source_file.as_os_str().to_str().unwrap(),
                err
            );
            vec![]
        })
    }
}

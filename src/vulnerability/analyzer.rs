use std::{path::Path, process::Command};

use regex::Regex;

/// A tool that can analyze source code and extract vulnerability information.
pub trait StaticAnalyzer {
    /// Name of the source code static analyzer tool.
    fn name(&self) -> &str;
    /// List of the vulnerabilities (if any) from a source file
    /// reported by the static analyzer.
    fn vulnerabilities(&self, source_file: &Path) -> Vec<String>;
    /// List of CWEs (if applicable) retrieved from the vulnerability
    /// report output.
    fn cwes(&self, source_file: &Path) -> Vec<String> {
        self.vulnerabilities(source_file)
            .into_iter()
            .map(|vulnerability| {
                Regex::new(r"\(CWE[^)]+\)")
                    .unwrap()
                    .find_iter(&vulnerability)
                    .map(|cwe| String::from(cwe.as_str()))
                    .collect()
            })
            .collect()
    }
}

/// Extracts all capture groups of a regular expression from a [`Command`]'s output.
pub fn extract_from_command(
    regex: &Regex,
    command: &mut Command,
    stdout: bool,
) -> Result<Vec<String>, String> {
    let output = command.output().or_else(|err| Err(err.to_string()))?;
    // Match the regex, convert output to UTF-8, and collect capture groups
    let matches: Vec<String> = regex
        .captures(
            &String::from_utf8(if stdout { output.stdout } else { output.stderr })
                .expect("Could not convert command output to string"),
        )
        .into_iter()
        .map(|c| c.iter().map(|s| s.unwrap().as_str()).collect())
        .collect();
    Ok(matches)
}

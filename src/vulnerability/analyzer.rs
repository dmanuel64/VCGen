use std::{path::Path, process::Command};

use regex::Regex;

pub trait StaticAnalyzer {
    fn name(&self) -> String;
    fn vulnerabilities(&self, source_file: &Path) -> Vec<String>;
    fn cwes(&self, source_file: &Path) -> Vec<String> {
        self.vulnerabilities(source_file)
            .into_iter()
            .map(|vulnerability| {
                Regex::new(r"\(CWE[^)]+\)")
                    .unwrap()
                    .find_iter(&vulnerability)
                    .map(|cwe| String::from(cwe.as_str()))
                    .collect()
            })
            .collect()
    }
}

pub fn extract_from_command(
    regex: &Regex,
    command: &mut Command,
    stdout: bool,
) -> Result<Vec<String>, String> {
    let output = command.output().or_else(|err| Err(err.to_string()))?;
    let matches: Vec<String> = regex
        .find_iter(&String::from_utf8(if stdout { output.stdout } else { output.stderr }).unwrap())
        .map(|m| String::from(m.as_str()))
        .collect();
    Ok(matches)
}
